<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	mapper接口代理实现编写规则：
	1，映射文件中namespace要等于接口的全路径名称
	2，映射文件中sql语句id要等于接口的方法名称
	3，映射文件中传入参数类型要等于接口方法的传入参数类型
	4，映射文件中返回结果集类型要等于接口方法的返回值类型
 -->
<mapper namespace="com.qq986945193.ssmtools.mapper.MyBatisUserMapper1">
		<!-- 
			id：sql语句的唯一标示。等于接口中的方法名
			parameterType:指定传入参数类型
			resultType:返回结果集
			#{}占位符：起到占位作用，如果传入的是基本类型则可以随便写。
		 -->
	<select id="findUserById" parameterType="int" resultType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
		select * from mybatis_user where id = #{id}
	</select>
 <!-- 根据用户名查询用户信息。 这里使用模糊查询.返回一个用户集合-->
	 <!-- 
	 	如果返回结果为集合，可以调用selectList()方法，这个方法返回的结果就是一个结合。所以映射文件中应该配置成集合泛型的类型
	 	${}拼接符：字符串原样拼接，如果传入的参数是基本类型，name${}中的变量名称必须是value
	 	注意：拼接符有sql注入的风险，所以慎重使用
	  -->
	 <select id="findUserByUsername" parameterType="java.lang.String" resultType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
	 	select * from mybatis_user where username like '%${value}%'
	 </select>
	 <!-- 插入用户到数据库
		#{}如果传入的不是基本类型的数据，而是pojo类型，那么#{}中的变量名称必须是pojo中对应的属性名
		如果返回数据库自增主键，可以使用：select LAST_INSERT_ID();这个是sql语句
	
	 -->
	 <insert id="insertUser" parameterType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
		<!-- 执行select LAST_INSERT_ID();数据库函数，返回自增的主键 
			keyProperty:将返回的主键放入传入参数的ID中保存
			order：当前函数相对于insert语句的执行顺序，在insert前执行时before，在insert后执行时after
			resultType:id的类型，也就是keyProperties中属性的类型
		-->
		<!-- insert into mybatis_user (username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address}) -->
	 	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
	 	insert into mybatis_user values (#{id},#{username},#{sex},#{birthday},#{address});
	 </insert>
	 
	 <select id="findUserByVo" parameterType="com.qq986945193.ssmtools.pojo.MyBatisUserQueryVo1" resultType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
	 	select * from mybatis_user where username like '%${user.username}%'
	 </select>
	 <select id="findUserCount"  resultType="int">
		select count(*) from mybatis_user
	 </select>
	 
	 
	 <!-- 
	 	封装sql条件，封装后可以重用。
	 	id:是这个sql条件的唯一标示
	  -->
	 <sql id="user_where">
	 	<!-- where 标签作用；
	 		会自动向sql语句中添加where关键词。会去掉第一个条件的关键字
	  -->	
	 	<where>
	 		<if test="username!=null and username!=''">
	 			and username like '%${username}%'
	 		</if>
	 		<if test="sex!=null and sex!=''">
	 			and sex = #{sex}
	 		</if>
	 	</where>
	 </sql>
	 
	 <select id="findUserByUsernameAndSex"  parameterType="com.qq986945193.ssmtools.pojo.MyBatisUser1" resultType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
<!-- 		select * from mybatis_user where username like '%${username}%' and sex = #{sex}
	 	select * from mybatis_user where username like '%david%' and sex = 'man' -->
		<!-- 这里可以引用我们的sql。调用sql条件 -->
		select * from mybatis_user
		<include refid="user_where"></include>
	 </select>
	 
	 <select id="findUserByIds" parameterType="com.qq986945193.ssmtools.pojo.MyBatisUserQueryVo1" resultType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
	 	select * from mybatis_user
	 	<where>
	 		<if test="ids!=null">
	 			<!-- 
	 				foreach:循环传入的集合参数
	 				collection：传入的集合的变量名称
	 				item:每次循环将循环出的数据放入到这个变量中
	 				open:循环开始拼接的字符串
	 				close：循环结束拼接的字符串	
	 			 -->
	 			<foreach collection="ids" item="id" open="id in(" close=")" separator=",">
	 				#{id}
	 			</foreach>
	 		
	 		</if>
	 	</where>
	 </select>
	 
	 <!-- 一对一：自动映射 -->
	 <select id="findOrdersAndUser1" resultType="com.qq986945193.ssmtools.pojo.MyBatisCustomerOrders">
	 	select o.*,u.id uid,username,birthday,sex,address
	 	from mybatis_orders o,mybatis_user u 
	 	where o.user_id = u.id
	 </select>
	 <!-- 一对一：手动映射 -->
	 <resultMap type="com.qq986945193.ssmtools.pojo.MyBatisOrders1" id="orderAndUserResultMap">
	 	<!-- 
	 		id标签指定主键字段对应关系
	 		column：列 数据库中的字段名称
	 		property:属性，java中pojo中的属性名称
	 	 -->
	 	<id column="id" property="id"/>
	 	<!-- result：标签指定非主键字段的对应关系 -->
	 	<result column="user_id" property="user_id"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		<!-- 
			association这个标签指定单个对象的对应关系
			property:指定将数据放入MyBatisOrders1中的user属性中
			javaType:user属性的类型
		 -->
		 <association property="user" javaType="com.qq986945193.ssmtools.pojo.MyBatisUser1">
		 	<id column="id" property="id"/>
		 	<result column="username" property="username"/>
		 	<result column="birthday" property="birthday"/>
		 	<result column="sex" property="sex"/>
		 	<result column="address" property="address"/>
		 </association>
	 </resultMap>
	 
	 <select id="findOrdersAndUser2" resultMap="orderAndUserResultMap">
		select o.*,u.id uid,username,birthday,sex,address
	 	from mybatis_orders o,mybatis_user u 
	 	where o.user_id = u.id
	 </select>
	 <!-- 一对多，一个用户对应多个订单..前面都是查询订单和用户。这里查询用户中的订单..用户然后拼接订单 -->
	<resultMap type="com.qq986945193.ssmtools.pojo.MyBatisUser1" id="userAndOrdersResultMap">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="birthday" property="birthday"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		<!-- 由于是一个集合，所以对应的集合对象关系映射为
			property:将数据放入user对象中的orderlist属性中
			ofType:指定orderList属性的泛型类型
		 -->
		 <collection property="ordersList" ofType="com.qq986945193.ssmtools.pojo.MyBatisOrders1">
		 	<id column="id" property="id"/>
		 	<result column="user_id" property="user_id"/>
			<result column="number" property="number"/>
			<result column="createtime" property="createtime"/>
		 </collection>
	</resultMap>
	
	 <select id="findUserAndOrders" resultMap="userAndOrdersResultMap">
	 	select u.*,o.id oid,user_id,number,createtime
	 	from mybatis_user u,mybatis_orders o
	 	where u.id = o.user_id
	 </select>
</mapper>